{"version":3,"sources":["krouter.js"],"names":["$","Router","routes","currentRoute","defaultRoute","container","options","accessControl","route","debug","autoInit","log","args","console","trace","init","Object","assign","this","window","addEventListener","e","handleRoute","preventDefault","path","handler","url","parseRoute","hash","location","substring","paramPairs","split","params","forEach","pair","key","value","async","event","keys","sort","reverse","i","length","match","RegExp","navigate","Error","empty","componentEl","appendTo","komponent","data","error","paramString","entries","map","join","getCurrentRoute","krouter","komponentor","jQuery"],"mappings":"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","file":"krouter.min.js","sourcesContent":["/**\n * Komponentor Router - Hash-based routing system\n * @module komponentor-router\n */\n\n(function($) {\n\n    const Router = {\n        routes: {},\n        currentRoute: null,\n        defaultRoute: null,\n        container: null,\n        options: {\n            accessControl: (route)=>true,\n            debug: false,\n            autoInit: true\n        }\n    };\n\n    // Logging utility\n    const log = (...args) => {\n        if (Router.options.debug) {\n            console.log('[KomponentorRouter]', ...args);\n            console.trace('[KomponentorRouter]');\n        }\n    };\n\n    /**\n     * Initialize the router\n     * @param {Object} options Router configuration\n     * @param {string} options.container Container selector where components will be rendered\n     * @param {boolean} options.debug Enable debug logging\n     * @param {string} options.defaultRoute Default route when none specified\n     */\n    Router.init = function(options = {}) {\n        log('Router.init',options);\n        Object.assign(this.options, options);\n        \n        if (options.container) {\n            this.container = $(options.container);\n        }\n        \n        if (options.defaultRoute) {\n            this.defaultRoute = options.defaultRoute;\n        }\n\n        if (options.routes) {\n            this.routes = options.routes;\n        }\n\n        // Handle initial route\n        window.addEventListener('load', (e) => this.handleRoute(e));\n\n        // Handle route changes\n        window.addEventListener('hashchange', (e) => {\n            e.preventDefault();\n            this.handleRoute(e);\n        });\n\n        log('Router initialized', this.options);\n        return this;\n    };\n\n    /**\n     * Add a route handler\n     * @param {string} path Route path\n     * @param {Object|Function} handler Route handler or component config\n     */\n    Router.route = function(path, handler) {\n        if (typeof handler === 'string') {\n            // If handler is a string, treat it as a component URL\n            handler = { url: handler };\n        }\n\n        this.routes[path] = handler;\n        log('Route added', path, handler);\n        return this;\n    };\n\n    /**\n     * Parse the current hash location\n     * @returns {Object} Parsed route data\n     */\n    Router.parseRoute = function() {\n        const hash = window.location.hash.substring(1) || this.defaultRoute || '';\n        const [path, ...paramPairs] = hash.split('|');\n        const params = {};\n        \n        paramPairs.forEach(pair => {\n            const [key, value] = pair.split('=');\n            params[key] = value;\n        });\n\n        return {\n            path,\n            params,\n            hash: hash\n        };\n    };\n\n    /**\n     * Handle route change\n     */\n    Router.handleRoute = async function(event) {\n        const route = this.parseRoute();\n        \n        // Exit if hash hasn't changed from current route\n        if (this.currentRoute && this.currentRoute.hash === route.hash) {\n            log('Hash unchanged, skipping route handling');\n            return;\n        }\n\n        let handler = null;\n        const routes = Object.keys(this.routes).sort().reverse();\n        for(let i=0;i<routes.length;i++) {\n            if(route.path.match(new RegExp(\"^\"+routes[i]+\"$\"))) {\n                handler = this.routes[routes[i]];\n                break;\n            }\n        }\n\n        // Check access control if configured\n        if (this.options.accessControl) {\n            const isAllowed = await this.options.accessControl(route);\n            if (!isAllowed) {\n                log('Access denied for route', route.path);\n                return;\n            }\n        }\n        log('Handling route', route, handler);\n\n        if (!handler) {\n            log('No handler found for route', route.path);\n            if (this.defaultRoute && route.path !== this.defaultRoute) {\n                this.navigate(this.defaultRoute);\n            }\n            return;\n        }\n\n        try {\n            if (typeof handler === 'function') {\n                // Execute function handler\n                handler = await handler(route);\n            } \n            log(\"handler\",handler);\n            if(typeof handler === 'string') {\n                handler = {\n                    url: handler\n                }\n            }\n            if (typeof handler === 'object') {\n                // Load component\n                if (!this.container) {\n                    throw new Error('No container specified for component rendering');\n                }\n\n                // Clear previous component\n                this.container.empty();\n\n                // Create component element\n                const componentEl = $('<komponent>')\n                    .appendTo(this.container);\n\n                // Load component with route params\n                await componentEl.komponent({\n                    ...handler,\n                    data: {\n                        ...handler.data,\n                        ...route.params\n                    }\n                });\n            }\n\n            this.currentRoute = route;\n            log('Route handled successfully', route);\n        } catch (error) {\n            console.error('Error handling route:', error);\n        }\n    };\n\n    /**\n     * Navigate to a route\n     * @param {string} path Route path\n     * @param {Object} params Route parameters\n     */\n    Router.navigate = function(path, params = {}) {\n        const paramString = Object.entries(params)\n            .map(([key, value]) => `${key}=${value}`)\n            .join('|');\n\n        const hash = paramString ? `${path}|${paramString}` : path;\n        window.location.hash = hash;\n    };\n\n    /**\n     * Get current route information\n     * @returns {Object} Current route data\n     */\n    Router.getCurrentRoute = function() {\n        return this.currentRoute;\n    };\n\n    // Export router to global scope\n    window.krouter = Router;\n\n        // Wait for komponentor to be available\n    if (typeof window.komponentor === 'undefined') {\n        console.error('Komponentor not found. Make sure komponentor.modern.js is loaded first.');\n        return;\n    }\n})(jQuery); "]}